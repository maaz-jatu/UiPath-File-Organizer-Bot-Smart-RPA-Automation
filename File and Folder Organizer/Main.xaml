<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_strOptionByUser" Type="InArgument(x:String)" />
    <x:Property Name="in_strUserInputFolderPath" Type="InArgument(x:String)" />
    <x:Property Name="in_strUserInput" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1034,2121.33333333333</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="68">
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Threading</x:String>
      <x:String>System.Threading.Tasks</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Linq.Expressions</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="62">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Threading.Tasks.Extensions</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Core</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Every now and then our Downloads folder gets messy with lots of content and it takes a lot of time to navigate through multiples files and folders to find the required files and days to organize and clean the folder. So this organizer bot will do the following - &#xA;1. Move the files in the required folder, organizing the content of the folder in the subfolders.&#xA;2. Comes pre-loaded with the essential File types and folder structure.&#xA;Default folders- file mapping available&#xA;&#xA;Document&#xA;1.1 PDF&#xA;1.2 Compressed&#xA;1.3 MS Office&#xA;Photos&#xA;Music&#xA;Videos&#xA;Applications&#xA;Others (Miscellaneous)&#xA;Gives users the ability to add their custom mapping for the folder and subfolder mapping for the required file types, if not already present.&#xA;&#xA;3. No unwanted folders are created If there is no file type for the mapping.&#xA;4. Gives users the option to clean and structure other folders apart from the Downloads folder.&#xA;5. Monitors the other (miscellaneous File types) and gives the option to the user to define the folder for them as they are encountered.&#xA;6. 100 % configurable and flexible as per user requirement.&#xA;Option to reset the bot to its initial file and folder settings In case of any loss or miss-match of file folder mapping.&#xA;&#xA;Added feature - If Username is added by the user in the Config file, then all the personal files will automatically be moved to the user's personal folder with name same as username. Eg- Username - John Smith, files like 'John Passport', 'John DL' etc will be moved to the folder 'John Smith'. [Note: It's a choice of the user to fill the Username.]" DisplayName="File and Folder Organizer Bot" sap:VirtualizedContainerService.HintSize="666.6666666666666,1846.6666666666667" sap2010:WorkflowViewState.IdRef="Sequence_51">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="Config" />
      <Variable x:TypeArguments="x:String" Name="strListOfFolders" />
      <Variable x:TypeArguments="s:String[]" Name="strArrFolderNames" />
      <Variable x:TypeArguments="x:String" Name="strExtension" />
      <Variable x:TypeArguments="x:Boolean" Name="boolFileTypeKnown" />
      <Variable x:TypeArguments="x:String" Default="File and Folder Organizer" Name="strComponentName" />
      <Variable x:TypeArguments="s:String[]" Name="strArrFiles" />
      <Variable x:TypeArguments="x:Int32" Default="1" Name="intNumOfFiles" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch - File and Folder Organizer" sap:VirtualizedContainerService.HintSize="522.6666666666666,1746.6666666666667" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <Sequence sap2010:Annotation.AnnotationText="Organizes and groups the files in respective sub folders." DisplayName="File and Folder Organizer" sap:VirtualizedContainerService.HintSize="520.6666666666666,1130" sap2010:WorkflowViewState.IdRef="Sequence_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Start Log Message" sap:VirtualizedContainerService.HintSize="486.6666666666667,128" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;Starting sequence &quot;+strComponentName]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <ui:MessageBox ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" Buttons="Ok" Caption="Start up Screen Message" DisplayName="Start Up Screen Message" sap:VirtualizedContainerService.HintSize="486.6666666666667,118.66666666666667" sap2010:WorkflowViewState.IdRef="MessageBox_18" Text="[&quot;This bot is designed to organize the folder chosen by you. All the files will be grouped and moved into specific sub folders according to their extensions.&quot;+Environment.NewLine+ &quot;This has been done using a mapping file named 'Config.xlsx'. For any file with unknown extension, 3 options will be given to you -&quot;+Environment.NewLine+Environment.NewLine+&quot; 1. Create a new folder&quot;+Environment.NewLine+&quot; 2. Add in existing folder&quot;+Environment.NewLine+&quot; 3. Keep in Miscellaneous&quot;+Environment.NewLine+Environment.NewLine+ &quot;Apart from the extensions mapped in the mapping file, any other file extension can be added in the Config file just by adding a row and entering extension in 'Key' column and folder name in column 'FolderName, in the format '[FolderPath]\Folder Name'.&quot;+Environment.NewLine+Environment.NewLine+&quot; Username is a choice of yours to fill, based on which all the personal files will be moved to your personal folder.&quot;]" />
          <ui:InterruptibleWhile sap2010:Annotation.AnnotationText="User opts for 'Yes' option for bot execution" DisplayName="While condition is True" sap:VirtualizedContainerService.HintSize="486.6666666666667,674" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_3">
            <ui:InterruptibleWhile.Body>
              <Sequence DisplayName="Steps to organize files &amp; folders" sap:VirtualizedContainerService.HintSize="450,440.6666666666667" sap2010:WorkflowViewState.IdRef="Sequence_12">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InputDialog Options="{x:Null}" DisplayName="Input Dialog - user input if bot to be started or not" sap:VirtualizedContainerService.HintSize="416,332.6666666666667" sap2010:WorkflowViewState.IdRef="InputDialog_10" IsPassword="False" Label="[&quot;Do you want the bot to start organizing files?&quot;+Environment.NewLine+Environment.NewLine+&quot;Please note that the bot will not make any changes to the existing sub folders in the chosen Folder.&quot;]" OptionsString="[(&quot;Yes;Later&quot;)]" Title="Bot Organizer">
                  <ui:InputDialog.Result>
                    <OutArgument x:TypeArguments="x:String">[in_strOptionByUser]</OutArgument>
                  </ui:InputDialog.Result>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InputDialog>
                <If Condition="[in_strOptionByUser=&quot;Yes&quot;]" DisplayName="If user input is 'Yes'" sap:VirtualizedContainerService.HintSize="416,48" sap2010:WorkflowViewState.IdRef="If_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence DisplayName="Steps if user opted for 'Yes'" sap:VirtualizedContainerService.HintSize="376,552.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_55">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:SelectFolder DisplayName="Select Folder to organize - by User" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="SelectFolder_1" SelectedFolder="[in_strUserInputFolderPath]" />
                      <Assign DisplayName="Assign intNumOfFiles" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_9">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[intNumOfFiles]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[Directory.GetFiles(in_strUserInputFolderPath).Count]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <If Condition="[intNumOfFiles&gt;0]" DisplayName="If num of files&gt;0" sap:VirtualizedContainerService.HintSize="334,52.6666666666667" sap2010:WorkflowViewState.IdRef="If_18">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence DisplayName="Sequence if files are avail to organise" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_107">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:LogMessage DisplayName="Log Message - Notification to org files" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_13" Level="Trace" Message="[&quot;Bot will organize files in folder &quot;+path.GetFileNameWithoutExtension(in_strUserInputFolderPath)]">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:LogMessage>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Reads the config file" DisplayName="Read Config file" sap:VirtualizedContainerService.HintSize="334,144.666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_34" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\Read Config.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
                                <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">[{"Folder Mapping"}]</InArgument>
                                <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_Config">[Config]</OutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence DisplayName="Sequence if no files avail to organize" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_111">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Notification - No files to organize" sap:VirtualizedContainerService.HintSize="334,58.6666666666667" sap2010:WorkflowViewState.IdRef="MessageBox_19" Text="[&quot;There are no files to organize in the folder &quot;+Path.GetFileNameWithoutExtension(in_strUserInputFolderPath)]" />
                            <ui:Continue sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="Continue_1" />
                          </Sequence>
                        </If.Else>
                      </If>
                      <Sequence DisplayName="Steps to organize folder" sap:VirtualizedContainerService.HintSize="334,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_32">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Get files from the folder" sap:VirtualizedContainerService.HintSize="512.666666666667,62" sap2010:WorkflowViewState.IdRef="Assign_2">
                          <Assign.To>
                            <OutArgument x:TypeArguments="s:String[]">[strArrFiles]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles(in_strUserInputFolderPath)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each file in the folder" sap:VirtualizedContainerService.HintSize="512.666666666667,732.666666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[strArrFiles]">
                          <ui:ForEach.Body>
                            <ActivityAction x:TypeArguments="x:String">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="x:String" Name="file" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="Sequence to organize each file" sap:VirtualizedContainerService.HintSize="476,597.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_66">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Assign DisplayName="Get Extension of file" sap:VirtualizedContainerService.HintSize="434,62" sap2010:WorkflowViewState.IdRef="Assign_11">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">[strExtension]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">[Path.GetExtension(file).ToString.ToLower]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Assign DisplayName="Assign boolFileTypeKnown" sap:VirtualizedContainerService.HintSize="434,62" sap2010:WorkflowViewState.IdRef="Assign_26">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">[boolFileTypeKnown]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">[Config.Keys.Contains(strExtension)]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <TryCatch DisplayName="Try Catch - Move files with/without known extensions" sap:VirtualizedContainerService.HintSize="434,301.333333333333" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <TryCatch.Try>
                                    <If Condition="[boolFileTypeKnown]" DisplayName="If file with known extension" sap:VirtualizedContainerService.HintSize="484,52.6666666666667" sap2010:WorkflowViewState.IdRef="If_31">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <If.Then>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Organize files workflow" sap:VirtualizedContainerService.HintSize="200,52.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_28" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Organize files.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrExtension">[strExtension]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_strUserInputFolderPath">[in_strUserInputFolderPath]</InArgument>
                                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_strFile">[file]</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeWorkflowFile>
                                      </If.Then>
                                      <If.Else>
                                        <Sequence DisplayName="Sequence if file type is unknown" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_105">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ui:LogMessage DisplayName="Log Message - 'unknown file extension'" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_24" Level="Warn" Message="[&quot;File type is unknown.&quot;]">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                          </ui:LogMessage>
                                          <ui:InputDialog Options="{x:Null}" DisplayName="Input Dialog - User option for unknown file type " sap:VirtualizedContainerService.HintSize="334,299.333333333333" sap2010:WorkflowViewState.IdRef="InputDialog_37" IsPassword="False" Label="[&quot;The file has unknown extension &lt;&quot;+path.GetFileName(file)+&quot;&gt;. What do you want to do next?&quot;]" OptionsString="[(&quot;Create new folder;Add in existing folder;Keep in Miscellaneous folder&quot;)]" Title="Folder Creation User Input">
                                            <ui:InputDialog.Result>
                                              <OutArgument x:TypeArguments="x:String">[in_strUserInput]</OutArgument>
                                            </ui:InputDialog.Result>
                                          </ui:InputDialog>
                                          <Switch x:TypeArguments="x:String" DisplayName="Switch - if document type is other type" Expression="[If( in_strUserInput.ToString.ToUpper.Contains(&quot;NEW FOLDER&quot;), &quot;Create new folder&quot;, If( in_strUserInput.ToString.ToUpper.Contains(&quot;EXISTING&quot;), &quot;Add in existing folder&quot; ,if(in_strUserInput.ToString.ToUpper.Contains(&quot;MISCELLANEOUS&quot;),&quot;Keep in miscellaneous&quot;,&quot;Default&quot; )))]" sap:VirtualizedContainerService.HintSize="334,52.6666666666667" sap2010:WorkflowViewState.IdRef="Switch`1_11">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <Sequence x:Key="Create new folder" DisplayName="Sequence for moving file to newly created folder" sap:VirtualizedContainerService.HintSize="376,360" sap2010:WorkflowViewState.IdRef="Sequence_103">
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Move file to new sub folder workflow" sap:VirtualizedContainerService.HintSize="334,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_29" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Move file to new sub folder.xaml">
                                                <ui:InvokeWorkflowFile.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_strfile">[file]</InArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_strUserInputFolderPath">[in_strUserInputFolderPath]</InArgument>
                                                </ui:InvokeWorkflowFile.Arguments>
                                              </ui:InvokeWorkflowFile>
                                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Read Config file" sap:VirtualizedContainerService.HintSize="334,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_30" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\Read Config.xaml">
                                                <ui:InvokeWorkflowFile.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
                                                  <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">[{"Folder Mapping"}]</InArgument>
                                                  <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_Config">[Config]</OutArgument>
                                                </ui:InvokeWorkflowFile.Arguments>
                                              </ui:InvokeWorkflowFile>
                                            </Sequence>
                                            <Sequence x:Key="Add in existing folder" DisplayName="Sequence if user chose 'Add to existing sub folder'" sap:VirtualizedContainerService.HintSize="382.666666666667,791.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_106">
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                              <Assign DisplayName="Fetch Folders from the given folder path" sap:VirtualizedContainerService.HintSize="340.666666666667,62" sap2010:WorkflowViewState.IdRef="Assign_29">
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="s:String[]">[strArrFolderNames]</OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="s:String[]">[Directory.GetDirectories(in_strUserInputFolderPath)]</InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each folder in the given folder path" sap:VirtualizedContainerService.HintSize="340.666666666667,289.333333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_15" Values="[strArrFolderNames]">
                                                <ui:ForEach.Body>
                                                  <ActivityAction x:TypeArguments="x:String">
                                                    <ActivityAction.Argument>
                                                      <DelegateInArgument x:TypeArguments="x:String" Name="folder" />
                                                    </ActivityAction.Argument>
                                                    <Sequence DisplayName="Assign list of sub folders to a string var" sap:VirtualizedContainerService.HintSize="304,154" sap2010:WorkflowViewState.IdRef="Sequence_108">
                                                      <sap:WorkflowViewStateService.ViewState>
                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                        </scg:Dictionary>
                                                      </sap:WorkflowViewStateService.ViewState>
                                                      <Assign DisplayName="Assign list of folders" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_30">
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:String">[strListOfFolders]</OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:String">[strListOfFolders+path.GetFileNameWithoutExtension(folder)+";"]</InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                    </Sequence>
                                                  </ActivityAction>
                                                </ui:ForEach.Body>
                                                <sap:WorkflowViewStateService.ViewState>
                                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                  </scg:Dictionary>
                                                </sap:WorkflowViewStateService.ViewState>
                                              </ui:ForEach>
                                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Move files to chosen existing sub folder workflow" sap:VirtualizedContainerService.HintSize="340.666666666667,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_31" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Move file to chosen existing sub folder.xaml">
                                                <ui:InvokeWorkflowFile.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_strfile">[file]</InArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_strUserInputFolderPath">[in_strUserInputFolderPath]</InArgument>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="io_strListOfFolders">[strListOfFolders]</InOutArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_strExtension">[strExtension]</InArgument>
                                                </ui:InvokeWorkflowFile.Arguments>
                                              </ui:InvokeWorkflowFile>
                                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Read Config file" sap:VirtualizedContainerService.HintSize="340.666666666667,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_35" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\Read Config.xaml">
                                                <ui:InvokeWorkflowFile.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
                                                  <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">[{"Folder Mapping"}]</InArgument>
                                                  <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_Config">[Config]</OutArgument>
                                                </ui:InvokeWorkflowFile.Arguments>
                                              </ui:InvokeWorkflowFile>
                                            </Sequence>
                                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="Keep in miscellaneous" DisplayName="Invoke Move files to Miscellaneous workflow" sap:VirtualizedContainerService.HintSize="334,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_32" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Move file to Miscellaneous.xaml">
                                              <ui:InvokeWorkflowFile.Arguments>
                                                <InArgument x:TypeArguments="x:String" x:Key="in_strUserInputFolderPath">[in_strUserInputFolderPath]</InArgument>
                                                <InArgument x:TypeArguments="x:String" x:Key="in_strfile">[file]</InArgument>
                                              </ui:InvokeWorkflowFile.Arguments>
                                            </ui:InvokeWorkflowFile>
                                          </Switch>
                                        </Sequence>
                                      </If.Else>
                                    </If>
                                  </TryCatch.Try>
                                  <TryCatch.Catches>
                                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,129.333333333333" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ActivityAction x:TypeArguments="s:Exception">
                                        <ActivityAction.Argument>
                                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                        </ActivityAction.Argument>
                                        <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box - error message" sap:VirtualizedContainerService.HintSize="334,58.6666666666667" sap2010:WorkflowViewState.IdRef="MessageBox_20" Text="[exception.Message]" />
                                      </ActivityAction>
                                    </Catch>
                                  </TryCatch.Catches>
                                </TryCatch>
                              </Sequence>
                            </ActivityAction>
                          </ui:ForEach.Body>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:ForEach>
                      </Sequence>
                      <ui:LogMessage DisplayName="Log Message - bot execution finished notification" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_17" Level="Info" Message="[&quot;Bot has finished organizing the folder &quot;+path.GetFileNameWithoutExtension(in_strUserInputFolderPath)]">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:LogMessage>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence DisplayName="Steps if user opted for 'No'" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_109">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:LogMessage DisplayName="Log Message - User opted for 'No' option" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_25" Level="Info" Message="[&quot;User opted for 'No option'. Bot will stop now.&quot;]" />
                      <ui:Break DisplayName="Break - User opted 'no' for bot execution" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="Break_4" />
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </ui:InterruptibleWhile.Body>
            <ui:InterruptibleWhile.Condition>
              <Literal x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="Literal`1_1" Value="True" />
            </ui:InterruptibleWhile.Condition>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InterruptibleWhile>
          <ui:LogMessage DisplayName="End Log Message" sap:VirtualizedContainerService.HintSize="486.6666666666667,118.66666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;Ending sequence &quot;+strComponentName]" />
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="968,22" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Throw DisplayName="Throw AE" Exception="[new Exception(String.Format(&quot;Failure Message: {0}. Failure Source: [File and Folder Organizer Bot] - {1}.&quot;, exception.Message, exception.Source))]" sap:VirtualizedContainerService.HintSize="520.6666666666666,92" sap2010:WorkflowViewState.IdRef="Throw_3" />
          </ActivityAction>
        </Catch>
        <Catch x:TypeArguments="ui:BusinessRuleException" sap:VirtualizedContainerService.HintSize="968,22" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="ui:BusinessRuleException">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="ui:BusinessRuleException" Name="exception" />
            </ActivityAction.Argument>
            <Throw DisplayName="Throw BE" Exception="[new BusinessRuleException(String.Format(&quot;Failure Message: {0}. Failure Source: [File and Folder Organizer Bot] - {1}.&quot;, exception.Message, exception.Source))]" sap:VirtualizedContainerService.HintSize="520.6666666666666,92" sap2010:WorkflowViewState.IdRef="Throw_4" />
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
      <TryCatch.Finally>
        <Sequence DisplayName="Finally" sap:VirtualizedContainerService.HintSize="520.6666666666666,169.33333333333334" sap2010:WorkflowViewState.IdRef="Sequence_112">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="486.6666666666667,109.33333333333333" sap2010:WorkflowViewState.IdRef="MessageBox_21" Text="[“Files have been organized successfully.”]" />
        </Sequence>
      </TryCatch.Finally>
    </TryCatch>
  </Sequence>
</Activity>